{"ast":null,"code":"import { useSelector, useDispatch, connect } from \"react-redux\";\n// styles\nimport classes from \"./Counter.module.css\";\nimport { Component } from \"react\";\n\n// Functional Component\n/*\nconst Counter = () => {\n  const counter = useSelector((state) => state.counter);\n  const dispatch = useDispatch();\n\n  const actionHandler = (event) => {\n    if (event.target.id === \"increment\") {\n      dispatch({ type: \"INCREMENT\" });\n    }\n    if (event.target.id === \"decrement\") {\n      dispatch({ type: \"DECREMENT\" });\n    }\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div className={classes.action_container}>\n        <button\n          id=\"increment\"\n          className={classes.action_buttons}\n          onClick={actionHandler}\n        >\n          Increment\n        </button>\n        <button\n          id=\"decrement\"\n          className={classes.action_buttons}\n          onClick={actionHandler}\n        >\n          Decerement\n        </button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n*/\n\n// Class based Component\n/*\nclass Counter extends Component {\n  actionHandler(event) {\n    if (event.target.id === \"increment\") this.props.increment();\n    if (event.target.id === \"decrement\") this.props.decrement();\n  }\n\n  toggleCounterHandler() {}\n\n  render() {\n    return (\n      <main className={classes.counter}>\n        <h1>Redux Counter</h1>\n        <div className={classes.value}>{this.props.counter}</div>\n        <div className={classes.action_container}>\n          <button\n            id=\"increment\"\n            className={classes.action_buttons}\n            onClick={this.actionHandler.bind(this)}\n          >\n            Increment\n          </button>\n          <button\n            id=\"decrement\"\n            className={classes.action_buttons}\n            onClick={this.actionHandler.bind(this)}\n          >\n            Decerement\n          </button>\n        </div>\n        <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { counter: state.counter };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: \"INCREMENT\" }),\n    decrement: () => dispatch({ type: \"DECREMENT\" }),\n  };\n};\n*/\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"names":["useSelector","useDispatch","connect","classes","Component","mapStateToProps","mapDispatchToProps","Counter"],"sources":["C:/Users/aneshs/Documents/GitHub/React/react_redux-counter_app/src/components/Counter.js"],"sourcesContent":["import { useSelector, useDispatch, connect } from \"react-redux\";\n// styles\nimport classes from \"./Counter.module.css\";\nimport { Component } from \"react\";\n\n// Functional Component\n/*\nconst Counter = () => {\n  const counter = useSelector((state) => state.counter);\n  const dispatch = useDispatch();\n\n  const actionHandler = (event) => {\n    if (event.target.id === \"increment\") {\n      dispatch({ type: \"INCREMENT\" });\n    }\n    if (event.target.id === \"decrement\") {\n      dispatch({ type: \"DECREMENT\" });\n    }\n  };\n\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div className={classes.action_container}>\n        <button\n          id=\"increment\"\n          className={classes.action_buttons}\n          onClick={actionHandler}\n        >\n          Increment\n        </button>\n        <button\n          id=\"decrement\"\n          className={classes.action_buttons}\n          onClick={actionHandler}\n        >\n          Decerement\n        </button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n*/\n\n// Class based Component\n/*\nclass Counter extends Component {\n  actionHandler(event) {\n    if (event.target.id === \"increment\") this.props.increment();\n    if (event.target.id === \"decrement\") this.props.decrement();\n  }\n\n  toggleCounterHandler() {}\n\n  render() {\n    return (\n      <main className={classes.counter}>\n        <h1>Redux Counter</h1>\n        <div className={classes.value}>{this.props.counter}</div>\n        <div className={classes.action_container}>\n          <button\n            id=\"increment\"\n            className={classes.action_buttons}\n            onClick={this.actionHandler.bind(this)}\n          >\n            Increment\n          </button>\n          <button\n            id=\"decrement\"\n            className={classes.action_buttons}\n            onClick={this.actionHandler.bind(this)}\n          >\n            Decerement\n          </button>\n        </div>\n        <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { counter: state.counter };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: \"INCREMENT\" }),\n    decrement: () => dispatch({ type: \"DECREMENT\" }),\n  };\n};\n*/\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,OAAO,QAAQ,aAAa;AAC/D;AACA,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeF,OAAO,CAACG,eAAe,EAAEC,kBAAkB,CAAC,CAACC,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}