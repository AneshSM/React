{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n    const body = requestConfig.body === undefined ? {} : {\n      method: requestConfig.method ? requestConfig.method : \"GET\",\n      headers: requestConfig.headers ? requestConfig.headers : {},\n      body: requestConfig.body ? JSON.stringify(requestConfig.body) : {}\n    };\n    try {\n      const response = await fetch(requestConfig.url, body);\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  };\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useHttp","requestConfig","applyData","_s","isLoading","setIsLoading","error","setError","sendRequest","taskText","body","undefined","method","headers","JSON","stringify","response","fetch","url","ok","Error","data","json","err","message"],"sources":["C:/Users/aneshs/Documents/GitHub/React/react_custom-hooks-example_app/src/hooks/use-http.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    const body =\r\n      requestConfig.body === undefined\r\n        ? {}\r\n        : {\r\n            method: requestConfig.method ? requestConfig.method : \"GET\",\r\n            headers: requestConfig.headers ? requestConfig.headers : {},\r\n            body: requestConfig.body ? JSON.stringify(requestConfig.body) : {},\r\n          };\r\n    try {\r\n      const response = await fetch(requestConfig.url, body);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n  return { isLoading, error, sendRequest };\r\n};\r\n\r\nexport default useHttp;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAGA,CAACC,aAAa,EAAEC,SAAS,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtCJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,MAAMG,IAAI,GACRT,aAAa,CAACS,IAAI,KAAKC,SAAS,GAC5B,CAAC,CAAC,GACF;MACEC,MAAM,EAAEX,aAAa,CAACW,MAAM,GAAGX,aAAa,CAACW,MAAM,GAAG,KAAK;MAC3DC,OAAO,EAAEZ,aAAa,CAACY,OAAO,GAAGZ,aAAa,CAACY,OAAO,GAAG,CAAC,CAAC;MAC3DH,IAAI,EAAET,aAAa,CAACS,IAAI,GAAGI,IAAI,CAACC,SAAS,CAACd,aAAa,CAACS,IAAI,CAAC,GAAG,CAAC;IACnE,CAAC;IACP,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAChB,aAAa,CAACiB,GAAG,EAAER,IAAI,CAAC;MAErD,IAAI,CAACM,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MAElCpB,SAAS,CAACmB,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAnB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EACD,OAAO;IAAED,SAAS;IAAEE,KAAK;IAAEE;EAAY,CAAC;AAC1C,CAAC;AAACL,EAAA,CA/BIH,OAAO;AAiCb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}